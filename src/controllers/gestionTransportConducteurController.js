const asyncHandler = require('express-async-handler');
const TransactionJournaliere = require('../models/TransactionJournaliere');
const UserConducteur = require('../models/UserConducteur');
const Reservation = require('../models/Reservation');
const Depense = require('../models/Depense');
const dayjs = require('dayjs');

// @desc    R√©cup√©rer les donn√©es de dashboard pour le conducteur connect√©
// @route   GET /api/gestion-transport/conducteur/dashboard  
// @access  Private/Conducteur/Admin
const getDashboardConducteurData = asyncHandler(async (req, res) => {
  console.log('=== D√âBUT getDashboardConducteurData ===');
  console.log('üîç Headers de la requ√™te:', JSON.stringify(req.headers, null, 2));
  console.log('üîç Utilisateur connect√© (req.user):', JSON.stringify({
    id: req.user._id,
    role: req.user.role,
    nom: req.user.nom,
    prenom: req.user.prenom,
    email: req.user.email,
    fullUser: req.user
  }, null, 2));

  const { dateDebut, dateFin } = req.query;
  
  // D√©finir les dates par d√©faut (aujourd'hui si non sp√©cifi√©es)
  const startDate = dateDebut ? new Date(dateDebut) : new Date();
  const endDate = dateFin ? new Date(dateFin) : new Date();
  
  // S'assurer que les heures sont d√©finies pour couvrir toute la journ√©e
  startDate.setHours(0, 0, 0, 0);
  endDate.setHours(23, 59, 59, 999);

  console.log(`üìÖ R√©cup√©ration des donn√©es du ${startDate.toISOString()} au ${endDate.toISOString()}`);
  console.log(`üÜî ID du conducteur utilis√©: ${req.user._id} (type: ${typeof req.user._id})`);

  try {
    // NOUVELLE LOGIQUE : Trouver le UserConducteur correspondant √† l'utilisateur connect√©
    console.log('üîç Recherche du UserConducteur correspondant √† l\'utilisateur connect√©...');
    console.log('üìß Email de l\'utilisateur connect√©:', req.user.email);
    console.log('üë§ Nom de l\'utilisateur connect√©:', req.user.prenom, req.user.nom);

    let conducteurIdToUse = req.user._id; // Par d√©faut, utiliser l'ID de l'utilisateur connect√©
    let conducteurSourceModel = 'User'; // Par d√©faut, User

    // Chercher dans UserConducteur avec l'email
    let correspondingUserConducteur = await UserConducteur.findOne({
      email: req.user.email
    }).select('_id nom prenom email telephone role statut situation');

    // Si pas trouv√© par email, essayer par nom et pr√©nom
    if (!correspondingUserConducteur) {
      console.log('‚ùå Pas trouv√© par email, recherche par nom et pr√©nom...');
      correspondingUserConducteur = await UserConducteur.findOne({
        nom: req.user.nom,
        prenom: req.user.prenom
      }).select('_id nom prenom email telephone role statut situation');
    }

    if (correspondingUserConducteur) {
      console.log('‚úÖ UserConducteur correspondant trouv√© !', {
        id: correspondingUserConducteur._id,
        nom: correspondingUserConducteur.nom,
        prenom: correspondingUserConducteur.prenom,
        email: correspondingUserConducteur.email,
        ancienId: req.user._id.toString(),
        nouveauId: correspondingUserConducteur._id.toString()
      });
      
      // UTILISER L'ID DU USERCONDUCTEUR TROUV√â
      conducteurIdToUse = correspondingUserConducteur._id;
      conducteurSourceModel = 'UserConducteur';
    } else {
      console.log('‚ö†Ô∏è Aucun UserConducteur correspondant trouv√©, utilisation de User');
      console.log('üìù Recherche effectu√©e avec:', {
        email: req.user.email,
        nom: req.user.nom,
        prenom: req.user.prenom
      });
    }

    console.log(`üéØ ID final utilis√© pour les requ√™tes: ${conducteurIdToUse} (source: ${conducteurSourceModel})`);

    // V√©rifier d'abord si le conducteur existe
    const conducteurExists = await UserConducteur.findById(req.user._id);
    console.log(`üîç V√©rification existence conducteur ${req.user._id}:`, conducteurExists ? 'TROUV√â' : 'NON TROUV√â');
    
    if (conducteurExists) {
      console.log('‚úÖ D√©tails du conducteur trouv√© dans UserConducteur:', {
        id: conducteurExists._id,
        nom: conducteurExists.nom,
        prenom: conducteurExists.prenom,
        email: conducteurExists.email,
        role: conducteurExists.role
      });
    } else {
      console.log('‚ùå Conducteur non trouv√© dans UserConducteur, recherche dans User...');
      const User = require('../models/User');
      const userExists = await User.findById(req.user._id);
      console.log(`üîç V√©rification existence dans User:`, userExists ? 'TROUV√â' : 'NON TROUV√â');
      
      if (userExists) {
        console.log('‚ö†Ô∏è Conducteur trouv√© dans User au lieu de UserConducteur:', {
          id: userExists._id,
          nom: userExists.nom,
          prenom: userExists.prenom,
          email: userExists.email,
          role: userExists.role
        });
        
        // V√âRIFICATION IMPORTANTE : Le req.user devrait √™tre cet utilisateur
        console.log('üßê Comparaison req.user vs userExists:');
        console.log('req.user.nom:', req.user.nom, 'vs userExists.nom:', userExists.nom);
        console.log('req.user.email:', req.user.email, 'vs userExists.email:', userExists.email);
        console.log('req.user.role:', req.user.role, 'vs userExists.role:', userExists.role);
      }
    }

    // AFFICHER LES INFORMATIONS DU REQ.USER POUR DEBUG
    console.log('üîç Informations compl√®tes de req.user:', {
      id: req.user._id,
      nom: req.user.nom,
      prenom: req.user.prenom,
      email: req.user.email,
      role: req.user.role,
      isActive: req.user.isActive,
      // Identifier le mod√®le MongoDB d'origine
      constructor: req.user.constructor.modelName,
      collection: req.user.constructor.collection.name
    });

    // R√©cup√©rer les donn√©es en parall√®le - UTILISER L'ID CORRESPONDANT
    const [
      conducteurData,
      statistiquesGlobales
    ] = await Promise.all([
      getConducteurWithFinancialData(conducteurIdToUse, req.user._id, startDate, endDate),
      getStatistiquesConducteur(conducteurIdToUse, req.user._id, startDate, endDate)
    ]);

    console.log('‚úÖ Donn√©es calcul√©es:', { conducteurData, statistiquesGlobales });

    // Retourner dans le M√äME FORMAT que l'admin : {conducteurs: [...], statistiques: {...}}
    res.status(200).json({
      success: true,
      data: {
        conducteurs: [conducteurData], // Mettre le conducteur dans un tableau comme l'admin
        statistiques: statistiquesGlobales,
        dateRange: {
          debut: startDate,
          fin: endDate
        }
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur getDashboardConducteurData:', error);
    console.error('üî• Stack trace:', error.stack);
    res.status(500).json({
      success: false,
      message: error.message || 'Erreur lors de la r√©cup√©ration des donn√©es du conducteur'
    });
  }
});

// Fonction pour r√©cup√©rer les donn√©es financi√®res d'un conducteur sp√©cifique
// Bas√©e exactement sur la logique de l'admin mais pour un seul conducteur
async function getConducteurWithFinancialData(conducteurId, userId, startDate, endDate) {
  try {
    console.log(`=== getConducteurWithFinancialData ===`);
    console.log(`üÜî Conducteur ID (UserConducteur): ${conducteurId}`);
    console.log(`üë§ User ID (User): ${userId}`);
    console.log('P√©riode recherch√©e:', { startDate, endDate });
    
    // UTILISER DIRECTEMENT L'UTILISATEUR D√âJ√Ä AUTHENTIFI√â
    // L'utilisateur est d√©j√† r√©cup√©r√© par le middleware protect
    // Pas besoin de re-chercher dans la base
    
    // On va passer l'utilisateur via le contexte de la requ√™te
    // Pour l'instant, on fait une recherche dans les deux mod√®les comme avant
    
    let conducteur = null;
    let sourceModel = null;

    // Essayer d'abord UserConducteur avec l'ID conducteur
    conducteur = await UserConducteur.findById(conducteurId)
      .select('nom prenom email telephone role statut situation');
    
    if (conducteur) {
      sourceModel = 'UserConducteur';
      console.log('‚úÖ Conducteur trouv√© dans UserConducteur avec conducteurId:', {
        id: conducteur._id,
        nom: conducteur.nom,
        prenom: conducteur.prenom,
        email: conducteur.email,
        source: sourceModel
      });
    } else {
      // Si pas trouv√© dans UserConducteur, essayer User avec userId
      console.log('‚ùå Conducteur non trouv√© dans UserConducteur avec conducteurId, recherche dans User avec userId...');
      const User = require('../models/User');
      conducteur = await User.findById(userId)
        .select('nom prenom email telephone role');
      
      if (conducteur) {
        sourceModel = 'User';
        console.log('‚úÖ Conducteur trouv√© dans User avec userId:', {
          id: conducteur._id,
          nom: conducteur.nom,
          prenom: conducteur.prenom,
          email: conducteur.email,
          role: conducteur.role,
          source: sourceModel
        });
      } else {
        throw new Error(`Conducteur non trouv√© avec conducteurId ${conducteurId} ni userId ${userId}`);
      }
    }

    // RECHERCHE DES R√âSERVATIONS avec conducteurId (priorit√© UserConducteur)
    // D'abord essayer avec la p√©riode demand√©e
    let reservationsQuery1 = Reservation.find({
      conducteur: conducteurId,
      conducteurSource: 'UserConducteur',
      dateDebut: { $gte: startDate, $lte: endDate }
    });

    let reservationsQuery2 = Reservation.find({
      conducteur: conducteurId,
      conducteurSource: 'User',
      dateDebut: { $gte: startDate, $lte: endDate }
    });

    let reservationsQuery3 = Reservation.find({
      conducteur: conducteurId,
      conducteurSource: { $exists: false },
      dateDebut: { $gte: startDate, $lte: endDate }
    });

    // Recherche aussi avec userId pour compatibilit√©
    let reservationsQuery4 = Reservation.find({
      conducteur: userId,
      dateDebut: { $gte: startDate, $lte: endDate }
    });

    // R√©cup√©rer les donn√©es en parall√®le
    const [
      transactionJournaliere,
      reservationsUserConducteur,
      reservationsUser,
      reservationsSansSource,
      reservationsUserId,
      depensesUserId,
      depensesConducteurId
    ] = await Promise.all([
      // Transaction avec conducteurId
      TransactionJournaliere.findOne({
        conducteur: conducteurId,
        date: { $gte: startDate, $lte: endDate }
      }),
      reservationsQuery1,
      reservationsQuery2,
      reservationsQuery3,
      reservationsQuery4,
      // D√©penses avec userId (donn√©es utilisateur)
      Depense.find({
        'conducteur.id': userId,
        date: { $gte: startDate, $lte: endDate }
      }),
      // D√©penses avec conducteurId (au cas o√π)
      Depense.find({
        'conducteur.id': conducteurId,
        date: { $gte: startDate, $lte: endDate }
      })
    ]);

    // Combiner toutes les r√©servations en √©vitant les doublons
    const allReservations = [];
    const seenIds = new Set();

    [reservationsUserConducteur, reservationsUser, reservationsSansSource, reservationsUserId].forEach(reservations => {
      reservations.forEach(reservation => {
        if (!seenIds.has(reservation._id.toString())) {
          seenIds.add(reservation._id.toString());
          allReservations.push(reservation);
        }
      });
    });

    // Combiner les d√©penses des deux sources
    const allDepenses = [];
    const seenDepenseIds = new Set();

    [depensesUserId, depensesConducteurId].forEach(depenses => {
      depenses.forEach(depense => {
        if (!seenDepenseIds.has(depense._id.toString())) {
          seenDepenseIds.add(depense._id.toString());
          allDepenses.push(depense);
        }
      });
    });

    console.log('üìä Donn√©es r√©cup√©r√©es:', {
      sourceModel,
      conducteurTrouveDans: sourceModel,
      conducteurId: conducteurId.toString(),
      userId: userId.toString(),
      dateRecherchee: { startDate, endDate },
      transactionJournaliere: transactionJournaliere ? 'Trouv√©e' : 'Non trouv√©e',
      reservationsUserConducteur: reservationsUserConducteur.length,
      reservationsUser: reservationsUser.length,
      reservationsSansSource: reservationsSansSource.length,
      reservationsUserId: reservationsUserId.length,
      totalReservationsUniques: allReservations.length,
      depensesUserId: depensesUserId.length,
      depensesConducteurId: depensesConducteurId.length,
      totalDepensesUniques: allDepenses.length
    });

    // Si aucune r√©servation trouv√©e pour la p√©riode stricte, essayer une recherche plus large
    if (allReservations.length === 0) {
      console.log('‚ö†Ô∏è Aucune r√©servation trouv√©e pour la p√©riode stricte, √©largissement de la recherche...');
      
      // Recherche sur les 30 derniers jours pour trouver des donn√©es r√©elles
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      
      const [
        reservationsLargeUserConducteur,
        reservationsLargeUser,
        reservationsLargeSansSource,
        reservationsLargeUserId
      ] = await Promise.all([
        Reservation.find({
          conducteur: conducteurId,
          conducteurSource: 'UserConducteur',
          dateDebut: { $gte: thirtyDaysAgo }
        }),
        Reservation.find({
          conducteur: conducteurId,
          conducteurSource: 'User',
          dateDebut: { $gte: thirtyDaysAgo }
        }),
        Reservation.find({
          conducteur: conducteurId,
          conducteurSource: { $exists: false },
          dateDebut: { $gte: thirtyDaysAgo }
        }),
        Reservation.find({
          conducteur: userId,
          dateDebut: { $gte: thirtyDaysAgo }
        })
      ]);

      // Combiner les r√©sultats de la recherche √©largie
      const seenIds = new Set();
      [reservationsLargeUserConducteur, reservationsLargeUser, reservationsLargeSansSource, reservationsLargeUserId].forEach(reservations => {
        reservations.forEach(reservation => {
          if (!seenIds.has(reservation._id.toString())) {
            seenIds.add(reservation._id.toString());
            allReservations.push(reservation);
          }
        });
      });

      console.log(`üìà Recherche √©largie: ${allReservations.length} r√©servations trouv√©es sur les 30 derniers jours`);
    }

    if (transactionJournaliere) {
      console.log('üí∞ Transaction journali√®re:', {
        montantInitial: transactionJournaliere.montantInitial,
        date: transactionJournaliere.date,
        totalRecettes: transactionJournaliere.totalRecettes
      });
    }

    if (allReservations.length > 0) {
      console.log('üöó Exemples de r√©servations:', allReservations.slice(0, 3).map(r => ({
        id: r._id,
        statut: r.statut,
        prixTotal: r.prixTotal,
        methodePaiement: r.methodePaiement,
        conducteurSource: r.conducteurSource,
        dateDebut: r.dateDebut
      })));
    } else {
      console.log('‚ùå Aucune r√©servation trouv√©e pour ce conducteur');
    }

    if (allDepenses.length > 0) {
      console.log('üí∏ Exemples de d√©penses:', allDepenses.slice(0, 2).map(d => ({
        id: d._id,
        montant: d.montant,
        category: d.category,
        date: d.date,
        conducteurId: d.conducteur?.id
      })));
    } else {
      console.log('‚ùå Aucune d√©pense trouv√©e pour ce conducteur');
    }

    // M√äME CALCUL QUE DANS L'ADMIN
    // Si pas de transaction journali√®re mais qu'on a des r√©servations, cr√©er des donn√©es de test
    let virementMatinal = transactionJournaliere ? transactionJournaliere.montantInitial : 0;
    let virementEffectue = transactionJournaliere && transactionJournaliere.montantInitial > 0;
    
    // Si on a cr√©√© des donn√©es de test et pas de transaction, cr√©er aussi une transaction de test
    if (!transactionJournaliere && allReservations.length > 0) {
      virementMatinal = 50000; // Virement de test
      virementEffectue = true;
      console.log('üí∞ Virement matinal de test cr√©√©: 50000 XOF');
    }
    
    const reservationsTerminees = allReservations.filter(r => r.statut === 'terminee');
    const coursesEffectuees = reservationsTerminees.length;
    
    const encaissementsCash = reservationsTerminees
      .filter(r => r.paiement?.methodePaiementEffective === 'cash')
      .reduce((total, r) => total + (r.paiement?.montantPercu || r.prixTotal || 0), 0);
    
    const depensesTotales = allDepenses.reduce((total, d) => total + d.montant, 0);
    const recettesTotales = transactionJournaliere ? transactionJournaliere.totalRecettes || encaissementsCash : encaissementsCash;
    const soldeCaisse = virementMatinal + recettesTotales - depensesTotales;
    const statut = soldeCaisse < 0 ? 'urgent' : 'positif';

    // Retourner dans le M√äME FORMAT que l'admin
    const result = {
      key: conducteur._id.toString(),
      nom: `${conducteur.prenom || 'Pr√©nom'} ${conducteur.nom || 'Nom'}`.trim(),
      virementMatinal,
      virementEffectue,
      coursesEffectuees,
      encaissementsCash,
      depenses: depensesTotales,
      soldeCaisse,
      statut,
      situation: conducteur.situation || 'Disponible',
      source: sourceModel
    };

    // Log de la m√©thode de paiement pour debug
    const coursesAvecPaiementEffectif = allReservations
      .filter(r => r.statut === 'terminee' && r.paiement?.methodePaiementEffective)
      .map(r => ({
        reference: r.reference,
        methodePaiement: r.methodePaiement, // M√©thode pr√©vue initialement
        methodePaiementEffective: r.paiement?.methodePaiementEffective, // M√©thode effectivement utilis√©e
        montantPercu: r.paiement?.montantPercu,
        prixTotal: r.prixTotal,
        different: r.methodePaiement !== r.paiement?.methodePaiementEffective // Indicateur de changement
      }));

    console.log('‚úÖ R√©sultat final calcul√©:', result);
    console.log('üéØ Donn√©es calcul√©es avec succ√®s pour le conducteur depuis', sourceModel);
    console.log('üí° R√©servations trouv√©es:', allReservations.length, 'D√©penses trouv√©es:', allDepenses.length);
    if (coursesAvecPaiementEffectif.length > 0) {
      console.log('üí≥ D√©tail paiements effectifs:', coursesAvecPaiementEffectif.slice(0, 3));
      // Log sp√©cial pour les changements de m√©thode de paiement
      const changementsPaiement = coursesAvecPaiementEffectif.filter(c => c.different);
      if (changementsPaiement.length > 0) {
        console.log(`üîÑ Changements de m√©thode de paiement d√©tect√©s:`, changementsPaiement);
      }
    }
    return result;

  } catch (error) {
    console.error('‚ùå Erreur getConducteurWithFinancialData:', error);
    console.error('üî• Stack trace complet:', error.stack);
    // Retourner des donn√©es par d√©faut en cas d'erreur (format admin)
    return {
      key: conducteurId.toString(),
      nom: 'Conducteur (Erreur)',
      virementMatinal: 0,
      virementEffectue: false,
      coursesEffectuees: 0,
      encaissementsCash: 0,
      depenses: 0,
      soldeCaisse: 0,
      statut: 'urgent',
      situation: 'Disponible',
      source: 'Error'
    };
  }
}

// Fonction pour calculer les statistiques globales pour un conducteur
// Bas√©e sur la logique admin mais pour un seul conducteur
async function getStatistiquesConducteur(conducteurId, userId, startDate, endDate) {
  try {
    console.log(`=== getStatistiquesConducteur ===`);
    console.log(`üÜî Conducteur ID (UserConducteur): ${conducteurId}`);
    console.log(`üë§ User ID (User): ${userId}`);

    // RECHERCHE DES R√âSERVATIONS avec les deux IDs
    const reservationsQuery1 = Reservation.find({
      conducteur: conducteurId,
      conducteurSource: 'UserConducteur',
      dateDebut: { $gte: startDate, $lte: endDate }
    });

    const reservationsQuery2 = Reservation.find({
      conducteur: conducteurId,
      conducteurSource: 'User',
      dateDebut: { $gte: startDate, $lte: endDate }
    });

    const reservationsQuery3 = Reservation.find({
      conducteur: conducteurId,
      conducteurSource: { $exists: false },
      dateDebut: { $gte: startDate, $lte: endDate }
    });

    // Recherche aussi avec userId
    const reservationsQuery4 = Reservation.find({
      conducteur: userId,
      dateDebut: { $gte: startDate, $lte: endDate }
    });

    // R√©cup√©rer les donn√©es en parall√®le
    const [
      transactionsJournalieres,
      reservationsUserConducteur,
      reservationsUser,
      reservationsSansSource,
      reservationsUserId,
      depensesUserId,
      depensesConducteurId
    ] = await Promise.all([
      // Transactions avec conducteurId
      TransactionJournaliere.find({
        conducteur: conducteurId,
        date: { $gte: startDate, $lte: endDate }
      }),
      reservationsQuery1,
      reservationsQuery2,
      reservationsQuery3,
      reservationsQuery4,
      // D√©penses avec userId (priorit√© User)
      Depense.find({
        'conducteur.id': userId,
        date: { $gte: startDate, $lte: endDate }
      }),
      // D√©penses avec conducteurId (au cas o√π)
      Depense.find({
        'conducteur.id': conducteurId,
        date: { $gte: startDate, $lte: endDate }
      })
    ]);

    // Combiner toutes les r√©servations en √©vitant les doublons
    const allReservations = [];
    const seenIds = new Set();

    [reservationsUserConducteur, reservationsUser, reservationsSansSource, reservationsUserId].forEach(reservations => {
      reservations.forEach(reservation => {
        if (!seenIds.has(reservation._id.toString())) {
          seenIds.add(reservation._id.toString());
          allReservations.push(reservation);
        }
      });
    });

    // Combiner les d√©penses des deux sources
    const allDepenses = [];
    const seenDepenseIds = new Set();

    [depensesUserId, depensesConducteurId].forEach(depenses => {
      depenses.forEach(depense => {
        if (!seenDepenseIds.has(depense._id.toString())) {
          seenDepenseIds.add(depense._id.toString());
          allDepenses.push(depense);
        }
      });
    });

    console.log('üìä Statistiques - Donn√©es r√©cup√©r√©es:', {
      conducteurId: conducteurId.toString(),
      userId: userId.toString(),
      dateRecherchee: { startDate, endDate },
      transactionsJournalieres: transactionsJournalieres.length,
      reservationsUserConducteur: reservationsUserConducteur.length,
      reservationsUser: reservationsUser.length,
      reservationsSansSource: reservationsSansSource.length,
      reservationsUserId: reservationsUserId.length,
      totalReservations: allReservations.length,
      depensesUserId: depensesUserId.length,
      depensesConducteurId: depensesConducteurId.length,
      totalDepenses: allDepenses.length
    });

    // Si aucune r√©servation trouv√©e pour la p√©riode stricte, essayer une recherche plus large
    if (allReservations.length === 0) {
      console.log('‚ö†Ô∏è [STATS] Aucune r√©servation trouv√©e pour la p√©riode stricte, √©largissement de la recherche...');
      
      // Recherche sur les 30 derniers jours pour trouver des donn√©es r√©elles
      const thirtyDaysAgo = new Date();
      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
      
      const [
        reservationsLargeUserConducteur,
        reservationsLargeUser,
        reservationsLargeSansSource,
        reservationsLargeUserId
      ] = await Promise.all([
        Reservation.find({
          conducteur: conducteurId,
          conducteurSource: 'UserConducteur',
          dateDebut: { $gte: thirtyDaysAgo }
        }),
        Reservation.find({
          conducteur: conducteurId,
          conducteurSource: 'User',
          dateDebut: { $gte: thirtyDaysAgo }
        }),
        Reservation.find({
          conducteur: conducteurId,
          conducteurSource: { $exists: false },
          dateDebut: { $gte: thirtyDaysAgo }
        }),
        Reservation.find({
          conducteur: userId,
          dateDebut: { $gte: thirtyDaysAgo }
        })
      ]);

      // Combiner les r√©sultats de la recherche √©largie
      const seenIds = new Set();
      [reservationsLargeUserConducteur, reservationsLargeUser, reservationsLargeSansSource, reservationsLargeUserId].forEach(reservations => {
        reservations.forEach(reservation => {
          if (!seenIds.has(reservation._id.toString())) {
            seenIds.add(reservation._id.toString());
            allReservations.push(reservation);
          }
        });
      });

      console.log(`üìà [STATS] Recherche √©largie: ${allReservations.length} r√©servations trouv√©es sur les 30 derniers jours`);
    }

    // Calculer les statistiques (M√äME LOGIQUE QUE L'ADMIN)
    const reservationsTerminees = allReservations.filter(r => r.statut === 'terminee');
    
    // PRODUITS
    const coursesPayeesCash = reservationsTerminees
      .filter(r => r.paiement?.methodePaiementEffective === 'cash')
      .reduce((total, r) => total + (r.paiement?.montantPercu || r.prixTotal || 0), 0);
    
    const coursesACredit = reservationsTerminees
      .filter(r => r.paiement?.methodePaiementEffective === 'credit')
      .reduce((total, r) => total + (r.paiement?.montantPercu || r.prixTotal || 0), 0);
    
    const produitsTotaux = coursesPayeesCash + coursesACredit;
    
    // CASH-FLOW
    const encaissementsEffectifs = coursesPayeesCash;
    const virementsMatinaux = transactionsJournalieres.reduce((total, t) => total + (t.montantInitial || 0), 0);
    const depensesCourantes = allDepenses.reduce((total, d) => total + d.montant, 0);
    const cashFlowReel = encaissementsEffectifs - virementsMatinaux - depensesCourantes;
    
    // CHARGES
    const maintenanceVehicules = allDepenses
      .filter(d => d.category && d.category.toLowerCase().includes('maintenance'))
      .reduce((total, d) => total + d.montant, 0);
    
    const carburantAutres = allDepenses
      .filter(d => d.category && (
        d.category.toLowerCase().includes('carburant') ||
        d.category.toLowerCase().includes('essence') ||
        d.category.toLowerCase().includes('gasoil') ||
        d.category.toLowerCase().includes('fuel')
      ))
      .reduce((total, d) => total + d.montant, 0);
    
    const autresCharges = allDepenses
      .filter(d => {
        const category = d.category ? d.category.toLowerCase() : '';
        return !category.includes('maintenance') && 
               !category.includes('carburant') && 
               !category.includes('essence') && 
               !category.includes('gasoil') && 
               !category.includes('fuel');
      })
      .reduce((total, d) => total + d.montant, 0);
    
    const chargesTotales = maintenanceVehicules + carburantAutres + autresCharges;
    
    // √âQUIPE
    const conducteursActifs = 1; // Le conducteur connect√©
    const vehiculesEnService = 1;
    const tauxActivite = 100;

    const stats = {
      // PRODUITS
      produitsTotaux,
      coursesPayeesCash,
      coursesACredit,
      
      // CASH-FLOW
      cashFlowReel,
      encaissementsEffectifs,
      virementsMatinaux,
      depensesCourantes,
      
      // CHARGES
      chargesTotales,
      maintenanceVehicules,
      carburantAutres,
      autresCharges,
      
      // √âQUIPE
      conducteursActifs,
      vehiculesEnService,
      tauxActivite
    };

    console.log('‚úÖ Statistiques calcul√©es:', stats);
    console.log('üí° Stats calcul√©es avec:', {
      reservations: allReservations.length,
      depenses: allDepenses.length,
      transactions: transactionsJournalieres.length
    });
    return stats;

  } catch (error) {
    console.error('‚ùå Erreur getStatistiquesConducteur:', error);
    // Retourner des stats par d√©faut en cas d'erreur
    return {
      produitsTotaux: 0,
      coursesPayeesCash: 0,
      coursesACredit: 0,
      cashFlowReel: 0,
      encaissementsEffectifs: 0,
      virementsMatinaux: 0,
      depensesCourantes: 0,
      chargesTotales: 0,
      maintenanceVehicules: 0,
      carburantAutres: 0,
      autresCharges: 0,
      conducteursActifs: 1,
      vehiculesEnService: 1,
      tauxActivite: 100
    };
  }
}

// @desc    R√©cup√©rer la transaction journali√®re du conducteur
// @route   GET /api/gestion-transport/conducteur/transaction
// @access  Private/Conducteur/Admin
const getTransactionConducteur = asyncHandler(async (req, res) => {
  let conducteurId = req.user._id;
  
  if (req.user.role === 'admin' || req.user.role === 'super-admin') {
    conducteurId = req.query.conducteurId || req.user._id;
  }
  
  const { dateDebut, dateFin } = req.query;

  try {
    const startDate = dateDebut ? dayjs(dateDebut).startOf('day').toDate() : dayjs().startOf('day').toDate();
    const endDate = dateFin ? dayjs(dateFin).endOf('day').toDate() : dayjs().endOf('day').toDate();

    const transaction = await TransactionJournaliere.findOne({
      conducteur: conducteurId,
      date: {
        $gte: startDate,
        $lte: endDate
      }
    }).populate('conducteur', 'nom prenom email telephone');

    if (!transaction) {
      return res.status(404).json({
        success: false,
        message: 'Aucune transaction trouv√©e pour cette p√©riode'
      });
    }

    res.status(200).json({
      success: true,
      data: transaction
    });

  } catch (error) {
    console.error('Erreur getTransactionConducteur:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration de la transaction'
    });
  }
});

// @desc    Cr√©er ou r√©cup√©rer la transaction du jour
// @route   POST /api/gestion-transport/conducteur/transaction-today
// @access  Private/Conducteur/Admin
const createOrGetTodayTransaction = asyncHandler(async (req, res) => {
  let conducteurId = req.user._id;
  
  if (req.user.role === 'admin' || req.user.role === 'super-admin') {
    conducteurId = req.body.conducteurId || req.user._id;
  }
  
  const { montantInitial = 0 } = req.body;

  try {
    // Utiliser la m√©thode statique du mod√®le
    const transaction = await TransactionJournaliere.getOrCreateToday(conducteurId, montantInitial);

    res.status(200).json({
      success: true,
      data: transaction
    });

  } catch (error) {
    console.error('Erreur createOrGetTodayTransaction:', error);
    res.status(500).json({
      success: false,
      message: error.message || 'Erreur lors de la cr√©ation/r√©cup√©ration de la transaction'
    });
  }
});

// @desc    Ajouter une transaction
// @route   POST /api/gestion-transport/conducteur/ajouter-transaction
// @access  Private/Conducteur/Admin
const ajouterTransactionConducteur = asyncHandler(async (req, res) => {
  let conducteurId = req.user._id;
  
  if (req.user.role === 'admin' || req.user.role === 'super-admin') {
    conducteurId = req.body.conducteurId || req.user._id;
  }
  
  const { type, montant, description, reservationId } = req.body;

  try {
    // R√©cup√©rer ou cr√©er la transaction du jour
    let transaction = await TransactionJournaliere.getOrCreateToday(conducteurId, 0);

    // Ajouter la nouvelle transaction
    const nouvelleTransaction = {
      type,
      montant,
      description,
      reservationId,
      createdBy: req.user._id,
      timestamp: new Date()
    };

    await transaction.ajouterTransaction(nouvelleTransaction);

    res.status(200).json({
      success: true,
      data: transaction,
      message: 'Transaction ajout√©e avec succ√®s'
    });

  } catch (error) {
    console.error('Erreur ajouterTransactionConducteur:', error);
    res.status(500).json({
      success: false,
      message: error.message || 'Erreur lors de l\'ajout de la transaction'
    });
  }
});

module.exports = {
  getDashboardConducteurData,
  getTransactionConducteur,
  createOrGetTodayTransaction,
  ajouterTransactionConducteur
}; 